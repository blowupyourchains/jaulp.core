#
#    Copyright 2007 Asterios Raptis
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

#-------------------------------
#------     POP3 start    ------
#-------------------------------
# Default user name for POP3.
#mail.pop3.user=user@localhost
# The POP3 server to connect to.
#mail.pop3.host=localhost
# The POP3 server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 110.
#mail.pop3.port=110
# Socket connection timeout value in milliseconds. Default is infinite timeout.
#mail.pop3.connectiontimeout=5000
# Socket I/O timeout value in milliseconds. Default is infinite timeout.
#mail.pop3.timeout=5000
# Send a POP3 RSET command when closing the folder, before sending the QUIT command. Useful with POP3 servers that implicitly mark all messages that are read as "deleted"; this will prevent such messages from being deleted and expunged unless the client requests so. Default is false.
#mail.pop3.rsetbeforequit=false
# Class name of a subclass of com.sun.mail.pop3.POP3Message. The subclass can be used to handle (for example) non-standard Content-Type headers. The subclass must have a public constructor of the form MyPOP3Message(Folder f, int msgno) throws MessagingException.
#mail.pop3.message.class=mail.MyPOP3Message
# Local address (host name) to bind to when creating the POP3 socket. Defaults to the address picked by the Socket class. Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to. 
#mail.pop3.localaddress=?
# Local port number to bind to when creating the POP3 socket. Defaults to the port number picked by the Socket class. 
#mail.pop3.localport=33333
# If set to true, use APOP instead of USER/PASS to login to the POP3 server, if the POP3 server supports APOP. APOP sends a digest of the password rather than the clear text password. Defaults to false. 
#mail.pop3.apop.enable=false
# If set, specifies the name of a class that implements the javax.net.SocketFactory interface. This class will be used to create POP3 sockets. 
#mail.pop3.socketFactory.class=mail.MySocketFactory
# If set to true, failure to create a socket using the specified socket factory class will cause the socket to be created using the java.net.Socket class. Defaults to true. 
#mail.pop3.socketFactory.fallback=true
# Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.
#mail.pop3.socketFactory.port=44444
# If set to true, the POP3 TOP command will not be used to fetch message headers. This is useful for POP3 servers that don't properly implement the TOP command, or that provide incorrect information in the TOP command results. Defaults to false. 
#mail.pop3.disabletop=false
# If set to true, the headers that might have been retrieved using the POP3 TOP command will be forgotten and replaced by headers retrieved as part of the POP3 RETR command. Some servers, such as some version of Microsft Exchange, will return slightly different headers each time the TOP or RETR command is used. To allow the POP3 provider to properly parse the message content returned from the RETR command, the headers also returned by the RETR command must be used. Setting this property to true will cause these headers to be used, even if they differ from the headers returned previously as a result of using the TOP command. Defaults to false.
#mail.pop3.forgettopheaders=false
#-------------------------------
#------     POP3 end      ------
#-------------------------------
#-------------------------------
#------     IMAP start     -----
#-------------------------------
# Default user name for IMAP. Type:String 
#mail.imap.user=imapuser@localhost 
# The password for the user for IMAP. Type:String
#mail.imap.password=secret
# The IMAP server to connect to. Type:String  
#mail.imap.host=localhost
# The IMAP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 143. Type:int 
#mail.imap.port=143
# Controls whether the IMAP partial-fetch capability should be used. Defaults to true.  Type:boolean
#mail.imap.partialfetch=true
# Partial fetch size in bytes. Defaults to 16K.  Type:int
#mail.imap.fetchsize=16 
# Socket connection timeout value in milliseconds. Default is infinite timeout.  Type:int
#mail.imap.connectiontimeout=5000
# Socket I/O timeout value in milliseconds. Default is infinite timeout.  Type:int
#mail.imap.timeout=5000 
# Timeout value in milliseconds for cache of STATUS command response. Default is 1000 (1 second). Zero disables cache. Type:int 
#mail.imap.statuscachetimeout=1000  
# Maximum size of a message to buffer in memory when appending to an IMAP folder. If not set, or set to -1, there is no maximum and all messages are buffered. If set to 0, no messages are buffered. If set to (e.g.) 8192, messages of 8K bytes or less are buffered, larger messages are not buffered. Buffering saves cpu time at the expense of short term memory usage. If you commonly append very large messages to IMAP mailboxes you might want to set this to a moderate value (1M or less). Type:int  
#mail.imap.appendbuffersize=8192
# Maximum number of available connections in the connection pool. Default is 1.  Type:int
#mail.imap.connectionpoolsize=1 
# Timeout value in milliseconds for connection pool connections. Default is 45000 (45 seconds).  Type:int
#mail.imap.connectionpooltimeout=45000 
# Flag to indicate whether to use a dedicated store connection for store commands. Default is false.  Type:boolean
#mail.imap.separatestoreconnection=false  
# If false, attempts to open a folder read/write will fail if the SELECT command succeeds but indicates that the folder is READ-ONLY. This sometimes indicates that the folder contents can'tbe changed, but the flags are per-user and can be changed, such as might be the case for public shared folders. If true, such open attempts will succeed, allowing the flags to be changed. The getMode method on the Folder object will return Folder.READ_ONLY in this case even though the open method specified Folder.READ_WRITE. Default is false.  Type:boolean 
#mail.imap.allowreadonlyselect=false
# If true, prevents use of the non-standard AUTHENTICATE LOGIN command, instead using the plain LOGIN command. Default is false. Type:boolean
#mail.imap.auth.login.disable=false
# If true, prevents use of the AUTHENTICATE PLAIN command. Default is false.  Type:boolean
#mail.imap.auth.plain.disable=false 
# If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to a TLS-protected connection before issuing any login commands. Note that an appropriate trust store must configured so that the client will trust the server's certificate. This feature only works on J2SE 1.4 and newer systems. Default is false.  Type:boolean
#mail.imap.starttls.enable=false 
# Local address (host name) to bind to when creating the IMAP socket. Defaults to the address picked by the Socket class. Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to.  Type:String 
#mail.imap.localaddress=? 
# Local port number to bind to when creating the IMAP socket. Defaults to the port number picked by the Socket class.  Type:int
#mail.imap.localport=33333   
# If set to true, attempt to use the javax.security.sasl package to choose an authentication mechanism for login. Defaults to false.  Type:boolean 
#mail.imap.sasl.enable=false
# A space or comma separated list of SASL mechanism names to try to use.   Type:String
#mail.imap.sasl.mechanisms=?  
# The authorization ID to use in the SASL authentication. If not set, the authentication ID (user name) is used.   Type:String
#mail.imap.sasl.authorizationid=?  
# If set, specifies the name of a class that implements the javax.net.SocketFactory interface. This class will be used to create IMAP sockets.  Type:String 
#mail.imap.socketFactory.class=mail.MySocketFactory  
# If set to true, failure to create a socket using the specified socket factory class will cause the socket to be created using the java.net.Socket class. Defaults to true.  Type:boolean 
#mail.imap.socketFactory.fallback=true  
# Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used.   Type:int
#mail.imap.socketFactory.port=55555  
#-------------------------------
#------     IMAP end       -----
#-------------------------------
#-------------------------------
#------     SMTP start     -----
#-------------------------------
# Default user name for SMTP. Type:String
#mail.smtp.user=username
# The SMTP server to connect to. Type:String
mail.smtp.host=localhost
# The SMTP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 25. Type:int
mail.smtp.port=25
# Socket connection timeout value in milliseconds. Default is infinite timeout. Type:int
#mail.smtp.connectiontimeout=45000
# Socket I/O timeout value in milliseconds. Default is infinite timeout. Type:int
#mail.smtp.timeout=45000
# Email address to use for SMTP MAIL command. This sets the envelope return address. Defaults to msg.getFrom() or InternetAddress.getLocalAddress(). NOTE: mail.smtp.user was previously used for this. Type:String 
#mail.smtp.from=asterix@web.gr 
# Local host name used in the SMTP HELO or EHLO command. Defaults to InetAddress.getLocalHost().getHostName(). Should not normally need to be set if your JDK and your name service are configured properly. Type:String 
#mail.smtp.localhost=localhost 
# Local address (host name) to bind to when creating the SMTP socket. Defaults to the address picked by the Socket class. Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to. Type:String 
#mail.smtp.localaddress=? 
# Local port number to bind to when creating the SMTP socket. Defaults to the port number picked by the Socket class. Type:int 
#mail.smtp.localport=33333 
# If false, do not attempt to sign on with the EHLO command. Defaults to true. Normally failure of the EHLO command will fallback to the HELO command; this property exists only for servers that don't fail EHLO properly or don't implement EHLO properly. Type:boolean 
#mail.smtp.ehlo=true
# If true, attempt to authenticate the user using the AUTH command. Defaults to false. Type:boolean
mail.smtp.auth=false
# The submitter to use in the AUTH tag in the MAIL FROM command. Typically used by a mail relay to pass along information about the original submitter of the message. See also the setSubmitter method of SMTPMessage. Mail clients typically do not use this. Type:String 
#mail.smtp.submitter=?
# The NOTIFY option to the RCPT command. Either NEVER, or some combination of SUCCESS, FAILURE, and DELAY (separated by commas). Type:String
#mail.smtp.dsn.notify=NEVER
# The RET option to the MAIL command. Either FULL or HDRS. Type:String
#mail.smtp.dsn.ret=FULL
# If set to true, and the server supports the 8BITMIME extension, text parts of messages that use the "quoted-printable" or "base64" encodings are converted to use "8bit" encoding if they follow the RFC2045 rules for 8bit text. Type:boolean 
#mail.smtp.allow8bitmime=false
# If set to true, and a message has some valid and some invalid addresses, send the message anyway, reporting the partial failure with a SendFailedException. If set to false (the default), the message is not sent to any of the recipients if there is an invalid recipient address. Type:boolean 
#mail.smtp.sendpartial=false 
# The realm to use with DIGEST-MD5 authentication. Type:String
#mail.smtp.sasl.realm=? 
# If set to false, the QUIT command is sent and the connection is immediately closed. If set to true (the default), causes the transport to wait for the response to the QUIT command. Type:boolean 
#mail.smtp.quitwait=true
# If set to true, causes the transport to include an SMTPAddressSucceededException for each address that is successful. Note also that this will cause a SendFailedException to be thrown from the sendMessage method of SMTPTransport even if all addresses were correct and the message was sent successfully. Type:boolean 
#mail.smtp.reportsuccess=false 
# If set, specifies the name of a class that implements the javax.net.SocketFactory interface. This class will be used to create SMTP sockets. Type:String 
#mail.smtp.socketFactory.class=mail.MySocketFactory
# If set to true, failure to create a socket using the specified socket factory class will cause the socket to be created using the java.net.Socket class. Defaults to true. Type:boolean 
#mail.smtp.socketFactory.fallback=true 
# Specifies the port to connect to when using the specified socket factory. If not set, the default port will be used. Type:int
#mail.smtp.socketFactory.port=55555
# Extension string to append to the MAIL command. The extension string can be used to specify standard SMTP service extensions as well as vendor-specific extensions. Typically the application should use the SMTPTransport method supportsExtension to verify that the server supports the desired service extension. See RFC 1869 and other RFCs that define specific extensions. Type:String 
#mail.smtp.mailextension=? 
# If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to a TLS-protected connection before issuing any login commands. Note that an appropriate trust store must configured so that the client will trust the server's certificate. Defaults to false. Type:boolean 
#mail.smtp.starttls.enable=false
# If set to true, use the RSET command instead of the NOOP command in the isConnected method. In some cases sendmail will respond slowly after many NOOP commands; use of RSET avoids this sendmail issue. Defaults to false. Type:boolean 
#mail.smtp.userset=false 
#-------------------------------
#------     SMTP end       -----
#-------------------------------
#-------------------------------
#------     GLOBAL start   -----
#-------------------------------
# The initial debug mode. Default is false.Type:boolean 
mail.debug=true
# The return email address of the current user, used by the InternetAddress method getLocalAddress.Type:String
#mail.from=
# The MimeMessage class uses the InternetAddress method parseHeader to parse headers in messages. This property controls the strict flag passed to the parseHeader method. The default is true.Type:boolean   
#mail.mime.address.strict=true
# The default host name of the mail server for both Stores and Transports. Used if the mail.protocol.host property isn't set.Type:String 
#mail.host=localhost
# Specifies the default message access protocol. The Session method getStore() returns a Store object that implements this protocol. By default the first Store provider in the configuration files is returned.Type:String   
mail.store.protocol=pop3
# Specifies the default message access protocol. The Session method getTransport() returns a Transport object that implements this protocol. By default the first Transport provider in the configuration files is returned.Type:String   
mail.transport.protocol=smtp
# The default user name to use when connecting to the mail server. Used if the mail.protocol.user property isn't set.Type:String   
#mail.user= 
# Specifies the fully qualified class name of the provider for the specified protocol. Used in cases where more than one provider for a given protocol exists; this property can be used to specify which provider to use by default. The provider must still be listed in a configuration file.Type:String   
#mail.protocol.class= 
# The host name of the mail server for the specified protocol. Overrides the mail.host property.Type:String  
#mail.protocol.host= 
# The port number of the mail server for the specified protocol. If not specified the protocol's default port number is used.Type:int  
#mail.protocol.port=  
# The user name to use when connecting to mail servers using the specified protocol. Overrides the mail.user property.Type:String  
#mail.protocol.user=  


# The default charset to be used by JavaMail. If not set (the normal case), the standard J2SE file.encoding System property is used. This allows applications to specify a default character set for sending messages that's different than the character set used for files stored on the system. This is common on Japanese systems.Type:String  
#mail.mime.charset=?
# RFC 2047 requires that encoded text start at the beginning of a whitespace separated word. Some mailers, especially Japanese mailers, improperly encode text and include encoded text in the middle of words. This property controls whether JavaMail will attempt to decode such incorrectly encoded text. The default is true, meaning that JavaMail wil not attempt to decode such improperly decoded text.Type:boolean  
#mail.mime.decodetext.strict=true
# When choosing an encoding for the data of a message, JavaMail assumes that any of CR, LF, or CRLF are valid line terminators in message parts that contain only printable ASCII characters, even if the part is not a MIME text type. It's common, especially on UNIX systems, for data of MIME type application/octet-stream (for example) to really be textual data that should be transmitted with the encoding rules for MIME text. In rare cases, such pure ASCII text may in fact be binary data in which the CR and LF characters must be preserved exactly. If this property is set to true, JavaMail will consider a lone CR or LF in a body part that's not a MIME text type to indicate that the body part needs to be encoded. The default is false.Type:boolean  
#mail.mime.encodeeol.strict=false
#-------------------------------
#------     GLOBAL end     -----
#-------------------------------
#-----------------------------------------------------
#------     Package javax.mail.internet  start   -----
#-----------------------------------------------------
# If set to "true", the BASE64 decoder will ignore errors in the encoded data, returning EOF. This may be useful when dealing with improperly encoded messages that contain extraneous data at the end of the encoded stream. Note however that errors anywhere in the stream will cause the decoder to stop decoding so this should be used with extreme caution. The default is false. Type:boolean
#mail.mime.base64.ignoreerrors=false
# If set to "true", header fields containing just text such as the Subject and Content-Description header fields, and long parameter values in structured headers such as Content-Type will be folded (broken into 76 character lines) when set and unfolded when read. The default is true. Type:boolean  
#mail.mime.foldtext=true
# If set to "true", the setFileName method will also set the name parameter on the Content-Type header to the specified filename. This supports interoperability with some old mail clients. The default is true. Type:boolean  
#mail.mime.setcontenttypefilename=true
# When updating the headers of a message, a body part with a text content type but no charset parameter will have a charset parameter added to it if this property is set to "true". The default is true. Type:boolean  
#mail.mime.setdefaulttextcharset=true
# Normally, when parsing a multipart MIME message, a message that is missing the final end boundary line is not considered an error. The data simply ends at the end of the input. Note that messages of this form violate the MIME specification. If the property mail.mime.multipart.ignoremissingendboundary is set to false, such messages are considered an error and a MesagingException will be thrown when parsing such a message. Type:boolean  
#mail.mime.multipart.ignoremissingendboundary=true
# A string containing other email addresses that the current user is known by. The MimeMessage reply method will eliminate any of these addresses from the recipient list in the message it constructs, to avoid sending the reply back to the sender. Type:String  
#mail.alternates=reply@email.com
# If set to "true", the MimeMessage reply method will put all recipients except the original sender in the Cc list of the newly constructed message. Normally, recipients in the To header of the original message will also appear in the To list of the newly constructed message.Type:boolean  
#mail.replyallcc=true
#-----------------------------------------------------
#------     Package javax.mail.internet  end     -----
#-----------------------------------------------------