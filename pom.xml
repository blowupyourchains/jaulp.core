<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.alpharogroup</groupId>
	<artifactId>cashew.core</artifactId>
	<version>4.1.0</version>
	<packaging>pom</packaging>
	<inceptionYear>2007</inceptionYear>

	<name>Jaulp Core Parent</name>

	<description>
		Jaulp Core Parent is the parent project for all of the core Jaulp projects.
	</description>

	<url>https://github.com/astrapi69/cashew.core</url>

	<licenses>

		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>

	</licenses>

	<developers>

		<developer>
			<id>astrapi69</id>
			<name>Asterios Raptis</name>
			<email>astrapi69 at users.sf.net</email>
			<timezone>Berlin</timezone>
			<roles>
				<role>Project manager</role>
				<role>Developer</role>
			</roles>
		</developer>

	</developers>

	<organization>
		<name>Alpha Ro Group UG (haftungsbeschr√§ngt)</name>
		<url>http://www.alpharogroup.de/</url>
	</organization>

	<scm>
		<connection>scm:git:git:@github.com:astrapi69/cashew.core.git</connection>
		<developerConnection>scm:git:git@github.com:astrapi69/cashew.core.git</developerConnection>
		<url>git:@github.com:astrapi69/cashew.core.git</url>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<name>Nexus Release Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<ciManagement>
		<system>travis-ci</system>
		<url>https://travis-ci.org/astrapi69/cashew.core</url>
	</ciManagement>

	<issueManagement>
		<system>github</system>
		<url>https://github.com/astrapi69/cashew.core/issues</url>
	</issueManagement>

	<modules>
		<module>jaulp.collections</module>
		<module>jaulp.design.patterns</module>
		<module>jaulp.email</module>
		<module>jaulp.file</module>
		<module>jaulp.generic.tree</module>
		<module>jaulp.lang</module>
		<module>jaulp.net</module>
		<module>jaulp.swing</module>
		<module>jaulp.time</module>
		<module>jaulp.xml</module>
		<module>jaulp.test.objects</module>
	</modules>

	<properties>
		<!-- PROJECT encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- LOMBOK version -->
		<lombok.version>1.16.6</lombok.version>
		<!-- PARENT PROJECT versions -->
		<jaulp.core.version>${project.version}</jaulp.core.version>
		<!-- PROJECT MODULES versions -->
		<jaulp.collections.version>${jaulp.core.version}</jaulp.collections.version>
		<jaulp.design.patterns.version>${jaulp.core.version}</jaulp.design.patterns.version>
		<jaulp.email.version>${jaulp.core.version}</jaulp.email.version>
		<jaulp.file.version>${jaulp.core.version}</jaulp.file.version>
		<jaulp.generic.tree.version>${jaulp.core.version}</jaulp.generic.tree.version>
		<jaulp.lang.version>${jaulp.core.version}</jaulp.lang.version>
		<jaulp.net.version>${jaulp.core.version}</jaulp.net.version>
		<jaulp.swing.version>${jaulp.core.version}</jaulp.swing.version>
		<jaulp.test.objects.version>${jaulp.core.version}</jaulp.test.objects.version>
		<jaulp.time.version>${jaulp.core.version}</jaulp.time.version>
		<jaulp.xml.version>${jaulp.core.version}</jaulp.xml.version>
		<!-- MYSTIC-CRYPT versions -->
		<mystic-crypt.version>4.0.0</mystic-crypt.version>
		<crypt-core.version>${mystic-crypt.version}</crypt-core.version>
		<randomizer.version>${mystic-crypt.version}</randomizer.version>
		<auth-security.version>${mystic-crypt.version}</auth-security.version>
		<!-- EXTERNAL LIBRARIES versions -->
		<commons-beanutils.version>1.9.2</commons-beanutils.version>
		<commons-codec.version>1.10</commons-codec.version>
		<commons-collections4.version>4.0</commons-collections4.version>
		<commons-io.version>2.4</commons-io.version>
		<javax.mail.version>1.4.5</javax.mail.version>
		<jettison.version>1.3.1</jettison.version>
		<joda-time.version>2.7</joda-time.version>
		<mime-util.version>2.1.3</mime-util.version>
		<poi.version>3.11</poi.version>
		<swingx-all.version>1.6.5-1</swingx-all.version>
		<imgscalr-lib.version>4.2</imgscalr-lib.version>
		<velocity.version>1.7</velocity.version>
		<xercesImpl.version>2.9.0</xercesImpl.version>
		<xmlbeans.version>2.4.0</xmlbeans.version>
		<xstream.version>1.4.4</xstream.version>
		<zip4j.version>1.3.2</zip4j.version>
		<jackson-core.version>2.5.1</jackson-core.version>
		<!-- LOGGING versions -->
		<slf4j.version>1.6.4</slf4j.version>
		<log4j.version>1.2.16</log4j.version>
		<!-- UNIT TEST versions -->
		<testng.version>6.9.4</testng.version>
		<junit.version>4.12</junit.version>
		<!-- MAVEN PLUGIN versions -->
		<!-- MAVEN COMPILER PLUGIN version -->
		<maven-compiler-plugin.version>3.3</maven-compiler-plugin.version>
		<maven-compiler-plugin.source.version>1.8</maven-compiler-plugin.source.version>
		<maven-compiler-plugin.target.version>1.8</maven-compiler-plugin.target.version>
		<maven-compiler-plugin.compilerVersion>1.8</maven-compiler-plugin.compilerVersion>
		<maven-compiler-plugin.encoding>${project.build.sourceEncoding}</maven-compiler-plugin.encoding>
		<maven-compiler-plugin.optimize>true</maven-compiler-plugin.optimize>
		<maven-compiler-plugin.showWarnings>true</maven-compiler-plugin.showWarnings>
		<maven-compiler-plugin.debug>true</maven-compiler-plugin.debug>
		<!-- MAVEN SOURCE PLUGIN version -->
		<maven-source-plugin.version>2.4</maven-source-plugin.version>
		<!-- MAVEN CLEAN PLUGIN version -->
		<maven-clean-plugin.version>2.6.1</maven-clean-plugin.version>
		<!-- MAVEN INSTALL PLUGIN versions -->
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<!-- MAVEN JAVADOC PLUGIN version -->
		<maven-javadoc-plugin.version>2.10.3</maven-javadoc-plugin.version>
		<!-- BUILD-HELPER MAVEN PLUGIN versions -->
		<build-helper-maven-plugin.version>1.9.1</build-helper-maven-plugin.version>
		<!-- MAVEN ECLIPSE PLUGIN version -->
		<maven-eclipse-plugin.version>2.9</maven-eclipse-plugin.version>
		<!-- MAVEN ASSEBLY PLUGIN version -->
		<maven-assembly-plugin.version>2.5.3</maven-assembly-plugin.version>
		<!-- MAVEN SCM-PUBLISH PLUGIN version -->
		<maven-scm-publish-plugin.version>1.1</maven-scm-publish-plugin.version>
		<!-- MAVEN DEPLOY PLUGIN version -->
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<!-- MAVEN RELEASE PLUGIN version -->
		<maven-release-plugin.version>2.5.1</maven-release-plugin.version>
		<!-- MAVEN GPG PLUGIN version -->
		<maven-gpg-plugin.version>1.5</maven-gpg-plugin.version>
		<!-- NEXUS STAGING MAVEN PLUGIN version -->
		<nexus-staging-maven-plugin.version>1.6.5</nexus-staging-maven-plugin.version>
		<!-- LICENSE MAVEN PLUGIN versions -->
		<license-maven-plugin.version>2.8</license-maven-plugin.version>
		<!-- MAVEN SUREFIRE PLUGIN versions -->
		<maven-surefire-plugin.version>2.18.1</maven-surefire-plugin.version>
		<!-- COVERAGE MAVEN PLUGIN versions -->
		<coveralls-maven-plugin.version>3.0.1</coveralls-maven-plugin.version>
		<cobertura-maven-plugin.version>2.6</cobertura-maven-plugin.version>
	</properties>

	<dependencyManagement>

		<dependencies>
			<!-- LOMBOK DEPENDENCIES -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
				<optional>true</optional>
			</dependency>
			<!-- UNIT DEPENDENCIES FOR TESTING -->
			<!-- JUNIT DEPENDENCY -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<!-- TESTNG DEPENDENCY -->
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>${testng.version}</version>
			</dependency>

			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
				<version>${javax.mail.version}</version>
			</dependency>

			<dependency>
				<groupId>eu.medsea.mimeutil</groupId>
				<artifactId>mime-util</artifactId>
				<version>${mime-util.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-ooxml</artifactId>
				<version>${poi.version}</version>
			</dependency>

			<dependency>
				<groupId>com.thoughtworks.xstream</groupId>
				<artifactId>xstream</artifactId>
				<version>${xstream.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${commons-beanutils.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-collections4</artifactId>
				<version>${commons-collections4.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity</artifactId>
				<version>${velocity.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>${commons-codec.version}</version>
			</dependency>

			<dependency>
				<groupId>org.swinglabs.swingx</groupId>
				<artifactId>swingx-all</artifactId>
				<version>${swingx-all.version}</version>
			</dependency>

			<dependency>
				<groupId>org.imgscalr</groupId>
				<artifactId>imgscalr-lib</artifactId>
				<version>${imgscalr-lib.version}</version>
			</dependency>

			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>

			<dependency>
				<groupId>xerces</groupId>
				<artifactId>xercesImpl</artifactId>
				<version>${xercesImpl.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.xmlbeans</groupId>
				<artifactId>xmlbeans</artifactId>
				<version>${xmlbeans.version}</version>
			</dependency>

			<dependency>
				<groupId>org.codehaus.jettison</groupId>
				<artifactId>jettison</artifactId>
				<version>${jettison.version}</version>
			</dependency>

			<dependency>
				<groupId>net.lingala.zip4j</groupId>
				<artifactId>zip4j</artifactId>
				<version>${zip4j.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson-core.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson-core.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-json-org</artifactId>
				<version>${jackson-core.version}</version>
			</dependency>

			<!-- JAULP DEPENDENCIES -->
			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.collections</artifactId>
				<version>${jaulp.collections.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>randomizer</artifactId>
				<version>${randomizer.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>auth-security</artifactId>
				<version>${randomizer.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.time</artifactId>
				<version>${jaulp.time.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.email</artifactId>
				<version>${jaulp.email.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.file</artifactId>
				<version>${jaulp.file.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.test.objects</artifactId>
				<version>${jaulp.test.objects.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.net</artifactId>
				<version>${jaulp.net.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.lang</artifactId>
				<version>${jaulp.lang.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.swing</artifactId>
				<version>${jaulp.swing.version}</version>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>
		<!-- LOMBOK DEPENDENCIES -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<!-- LOGGING DEPENDENCIES -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<!-- LOGGING DEPENDENCIES - LOG4J -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>
		<!-- UNIT TESTS DEPENDENCIES -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/package.html</exclude>
				</excludes>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>

			<resource>
				<filtering>false</filtering>
				<directory>src/site</directory>
			</resource>

		</resources>

		<testResources>

			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/package.html</exclude>
				</excludes>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>

		</testResources>

		<pluginManagement>

			<plugins>

				<plugin>
					<inherited>true</inherited>
					<!-- NOTE: We don't need a groupId specification because the group is 
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${maven-compiler-plugin.source.version}</source>
						<target>${maven-compiler-plugin.target.version}</target>
						<compilerVersion>${maven-compiler-plugin.compilerVersion}</compilerVersion>
						<encoding>${maven-compiler-plugin.encoding}</encoding>
						<optimize>${maven-compiler-plugin.optimize}</optimize>
						<showWarnings>${maven-compiler-plugin.showWarnings}</showWarnings>
						<debug>${maven-compiler-plugin.debug}</debug>
					</configuration>
				</plugin>
				<!-- Configuring maven source plugin: To attach source artifacts to your 
					build we execute the source:jar goal from the source plugin during the package 
					phase. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Configuring maven clean plugin: deletes the generated test-output 
					directories that are generated from testng. -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>test-output</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
						</filesets>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>
				<!-- Configuring Maven Javadoc Plugin: To attach javadoc artifacts to 
					your build we execute the javadoc:jar goal from the javadoc plugin. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<detectOfflineLinks>false</detectOfflineLinks>
						<minmemory>128m</minmemory>
						<maxmemory>256m</maxmemory>
						<notimestamp>true</notimestamp>
						<quiet>true</quiet>
						<links>
							<link>http://download.oracle.com/javase/1.5.0/docs/api</link>
							<link>http://download.oracle.com/javaee/5/api</link>
						</links>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<additionalBuildcommands>
							<buildcommand>org.eclipse.m2e.core.maven2Builder</buildcommand>
						</additionalBuildcommands>
						<additionalProjectnatures>
							<projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
							<projectnature>org.springsource.ide.eclipse.gradle.core.nature</projectnature>
						</additionalProjectnatures>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>attached</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- @see 'http://blog.progs.be/517/publishing-javadoc-to-github-using-maven' -->
				<plugin>
					<artifactId>maven-scm-publish-plugin</artifactId>
					<version>${maven-scm-publish-plugin.version}</version>
					<configuration>
						<checkoutDirectory>${project.build.directory}/scmpublish</checkoutDirectory>
						<checkinComment>Publishing javadoc for
							${project.artifactId}:${project.version}</checkinComment>
						<content>${project.reporting.outputDirectory}/apidocs</content>
						<skipDeletedFiles>true</skipDeletedFiles>
						<pubScmUrl>scm:git:git:@github.com:astrapi69/jaulp.core.git</pubScmUrl>
						<scmBranch>gh-pages</scmBranch> <!-- branch with static site -->
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<mavenExecutorId>forked-path</mavenExecutorId>
					</configuration>
				</plugin>

				<!-- Signing with gpg -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- The Nexus Staging Maven Plugin is the recommended way to deploy 
					your components to OSSRH and release them to the Central Repository. _______________ 
					If your version is a release version (does not end in -SNAPSHOT) and with 
					this setup in place, you can run a deployment to OSSRH and an automated release 
					to the Central Repository with the usual: mvn clean deploy _________________________ 
					With the property autoReleaseAfterClose set to false you can manually inspect 
					the staging repository in Nexus and trigger a release of the staging repository 
					later with: mvn nexus-staging:release. -->
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>${nexus-staging-maven-plugin.version}</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<autoReleaseAfterClose>true</autoReleaseAfterClose>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
					<configuration>
						<header>src/main/resources/LICENSE.txt</header>
						<properties>
							<owner>Asterios Raptis</owner>
							<year>${project.inceptionYear}</year>
							<email>asterios.raptis@gmx.net</email>
						</properties>
						<excludes>
							<exclude>**/README</exclude>
							<exclude>**/pom.xml</exclude>
							<exclude>**/*.xml</exclude>
							<exclude>**/*.xsl</exclude>
							<exclude>**/*.xsd</exclude>
							<exclude>**/*.dtd</exclude>
							<exclude>**/*.html</exclude>
							<exclude>**/*.properties</exclude>
							<exclude>**/*.bat</exclude>
							<exclude>**/*.gradle</exclude>
							<exclude>**/*.MF</exclude>
							<exclude>**/*.txt</exclude>
							<exclude>**/*.vm</exclude>
							<exclude>src/test/resources/**</exclude>
							<exclude>src/main/resources/**</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>format</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<suiteXmlFiles>
							<suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
						</suiteXmlFiles>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>${coveralls-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>${cobertura-maven-plugin.version}</version>
					<configuration>
						<format>xml</format>
						<maxmem>256m</maxmem>
						<!-- aggregated reports for multi-module projects -->
						<aggregate>true</aggregate>
					</configuration>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-eclipse-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>oss.sonatype.org-staged-release</id>
			<!-- This is the profile to use for releasing into the staged release 
				repo. We need to sign the artifacts. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

			<distributionManagement>
				<snapshotRepository>
					<id>ossrh</id>
					<name>Sonatype Nexus Snapshots</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</snapshotRepository>
				<repository>
					<id>ossrh</id>
					<name>Nexus Release Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>

		</profile>

		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- This profile is for generate or update the license header from source 
				files. for generate or update the license header you have to run this profile 
				with this goal license:format. -->
			<id>update-license-header</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

		</profile>

		<profile>
			<id>release-javadoc-jar-with-dependencies</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>generate-reports</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>
